AWSTemplateFormatVersion: 2010-09-09
Mappings:
  Constants:
    S3Keys:
      GetBookPredictorCode: functions/GetBookPredictor.zip
      GetUserCategoryCode: functions/GetUserCategory.zip
  S3Buckets:
    eu-central-1:
      Bucket: apps.recommendation.dev.eu-central-1
Outputs:
  ApiUrl:
    Description: URL of the RESTful API Endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: PredictorApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/dev
Parameters:
  ProjectName:
    AllowedPattern: ^[a-z]{0,12}$
    ConstraintDescription: Must be lowercase and under twelve characters
    Description: Name of the project (lowercase and under twelve characters)
    Type: String
Resources:
  APIDeployment:
    DependsOn:
    - UserCategoryApiRequestGET
    - UserCategoryApiRequestOPTIONS
    Properties:
      Description: Dev deployment for API
      RestApiId:
        Ref: PredictorApi
      StageName: dev
    Type: AWS::ApiGateway::Deployment
  BookAttributeApiRequestGET:
    Properties:
      AuthorizationType: None
      HttpMethod: GET
      Integration:
        IntegrationResponses:
        - ResponseTemplates:
            application/json: '{"message": "OK"}'
          SelectionPattern: 2\d{2}
          StatusCode: 200
        - ResponseTemplates:
            application/json: '{"message": "Internal Server Error"}'
          SelectionPattern: 5\d{2}
          StatusCode: 500
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: BooksApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  BookAttributeApiRequestOPTIONS:
    Properties:
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: BooksApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  BookPredictorApiRequestOPTIONS:
    Properties:
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: BookPredictorApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  BookPredictorApiRequestPOST:
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseTemplates:
            application/json: $input.json('$.body')
          StatusCode: 200
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - FunctionGetBookPredictor
              - Arn
            - /invocations
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
      ResourceId:
        Ref: BookPredictorApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  BookPredictorApiResource:
    Properties:
      ParentId:
        Ref: BooksApiResource
      PathPart: recommendations
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Resource
  BooksApiResource:
    Properties:
      ParentId:
        Fn::GetAtt:
        - PredictorApi
        - RootResourceId
      PathPart: book
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Resource
  DynamoDbRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:Scan
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - UserAssignment
              - Arn
          - Action:
            - sagemaker:InvokeEndpoint
            - ssm:GetParameter
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: PredictorPolicy
      RoleName:
        Fn::Sub: ${ProjectName}-DynamoDbLambda
    Type: AWS::IAM::Role
  FunctionGetBookPredictor:
    Properties:
      Code:
        S3Bucket:
          Fn::FindInMap:
          - S3Buckets
          - Ref: AWS::Region
          - Bucket
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - GetBookPredictorCode
      Description: Get recommendation from Sagemaker Endpoint
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ProjectName
      FunctionName:
        Fn::Sub: ${ProjectName}-GetBookPredictor
      Handler: GetBookPredictor.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DynamoDbRole
        - Arn
      Runtime: python3.6
      Timeout: 300
    Type: AWS::Lambda::Function
  FunctionGetBookPredictorPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: FunctionGetBookPredictor
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: PredictorApi
          - /*
    Type: AWS::Lambda::Permission
  FunctionGetUserCategory:
    Properties:
      Code:
        S3Bucket:
          Fn::FindInMap:
          - S3Buckets
          - Ref: AWS::Region
          - Bucket
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - GetUserCategoryCode
      Description: Get if the user is categorized for AB Testing
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ProjectName
      FunctionName:
        Fn::Sub: ${ProjectName}-GetUserCategory
      Handler: GetUserCategory.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DynamoDbRole
        - Arn
      Runtime: python3.6
      Timeout: 300
    Type: AWS::Lambda::Function
  FunctionGetUserCategoryPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: FunctionGetUserCategory
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: PredictorApi
          - /*
    Type: AWS::Lambda::Permission
  PredictorApi:
    Properties:
      Description: API Endpoints for Recommendation/Personalization Inferences
      FailOnWarnings: true
      Name:
        Ref: ProjectName
    Type: AWS::ApiGateway::RestApi
  UserAssignment:
    Properties:
      AttributeDefinitions:
      - AttributeName: username
        AttributeType: S
      - AttributeName: testname
        AttributeType: S
      KeySchema:
      - AttributeName: username
        KeyType: HASH
      - AttributeName: testname
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName:
        Ref: ProjectName
    Type: AWS::DynamoDB::Table
  UserAttributeApiRequestGET:
    Properties:
      AuthorizationType: None
      HttpMethod: GET
      Integration:
        IntegrationResponses:
        - ResponseTemplates:
            application/json: '{"message": "OK"}'
          SelectionPattern: 2\d{2}
          StatusCode: 200
        - ResponseTemplates:
            application/json: '{"message": "Internal Server Error"}'
          SelectionPattern: 5\d{2}
          StatusCode: 500
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: UsersApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  UserAttributeApiRequestOPTIONS:
    Properties:
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: UsersApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  UserCategoryApiRequestGET:
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseTemplates:
            application/json: $input.json('$.body')
          StatusCode: 200
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - FunctionGetBookPredictor
              - Arn
            - /invocations
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
      RequestParameters:
        method.request.path.name: true
        method.request.querystring.test: true
      ResourceId:
        Ref: UserCategoryApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  UserCategoryApiRequestOPTIONS:
    Properties:
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: UserCategoryApiResource
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Method
  UserCategoryApiResource:
    Properties:
      ParentId:
        Ref: UsersApiResource
      PathPart: '{name}'
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Resource
  UsersApiResource:
    Properties:
      ParentId:
        Fn::GetAtt:
        - PredictorApi
        - RootResourceId
      PathPart: user
      RestApiId:
        Ref: PredictorApi
    Type: AWS::ApiGateway::Resource
